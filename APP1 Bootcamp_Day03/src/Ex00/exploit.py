from bs4 import BeautifulSoup
# Импортирует библиотеку BeautifulSoup из пакета bs4, 
# которая используется для парсинга и модификации HTML-кода.

def main():
# Определяет главную функцию main, 
# которая будет содержать все шаги для обработки HTML-файла.    
    # Шаг 1: Чтение исходного HTML-файла
    with open('evilcorp.html', 'r', encoding='utf-8') as file:
    # Открывает файл evilcorp.html в режиме чтения с кодировкой utf-8.
        soup = BeautifulSoup(file, 'html.parser')
        # Содержимое файла передается в BeautifulSoup, 
        # который парсит HTML-код и создает объект soup для дальнейшей работы.

    # Шаг 2: Изменение заголовка страницы
    if soup.title:
    # Проверяет, существует ли тег <title> в HTML-странице.
        soup.title.string = 'Evil Corp - Stealing your money every day'
        # Если существует, меняет содержимое тега <title> 
        # на строку 'Evil Corp - Stealing your money every day'.

    # Шаг 3: Парсинг имени пользователя
    user_name_tag = soup.find('span', class_='name')  # Ищем <span class="name">
    if user_name_tag:
        # Извлекаем титул (например, "Mr.") и фамилию
        pronoun_tag = user_name_tag.find('span', class_='pronoun')
        first_name = pronoun_tag.text.strip() if pronoun_tag else ''
        last_name = user_name_tag.contents[-1].strip()  # Фамилия всегда последняя

        # Формируем полное имя в формате "Mr. Alderson"
        full_name = f"{first_name} {last_name}".strip()
        
        # Создаем приветственное сообщение
        hacked_message = f'<h1>{full_name}, you are hacked!</h1>'
        hacked_message_tag = BeautifulSoup(hacked_message, 'html.parser')
        
        # Вставка нового <h1> в тело страницы
        body_tag = soup.find('body')
        if body_tag:
            # Используется метод insert(0, hacked_message_tag) 
            # для вставки тега <h1> в начало тега <body>, 
            # чтобы оно отображалось первым элементом на странице.
            body_tag.insert(0, hacked_message_tag)

    # Шаг 4: Вставка скрипта Трентона в тело страницы
    script_content = '''<script>
        hacked = function() {
            alert('hacked');
        }
        window.addEventListener('load', 
          function() { 
            var f = document.querySelector("form");
            f.setAttribute("onsubmit", "hacked()");
          },
          false
        );
    </script>'''
    # Формирует строку с JavaScript-кодом, 
    # который вызывает сообщение alert('hacked'), 
    # когда форма на странице отправляется.
    script_tag = BeautifulSoup(script_content, 'html.parser')
    # Преобразует строку с JavaScript в объект BeautifulSoup для вставки в HTML.
    soup.body.append(script_tag)
    # Добавляет полученный тег <script> в конец тега <body> страницы.

    # Шаг 5: Замена ссылки внизу страницы
    link_tag = soup.find('a')
    # Ищет первый тег <a> на странице (предположительно ссылку внизу).
    if link_tag and 'href' in link_tag.attrs:
    # Если ссылка найдена и она содержит атрибут href, 
    # заменяет ссылку на https://mrrobot.fandom.com/wiki/Fsociety.    
        link_tag['href'] = 'https://mrrobot.fandom.com/wiki/Fsociety'
        # Также изменяет текст ссылки на 'Fsociety'.
        link_tag.string = 'Fsociety'

    # Сохранение измененного HTML в новый файл
    with open('evilcorp_hacked.html', 'w', encoding='utf-8') as file:
    # Открывает новый файл evilcorp_hacked.html в режиме записи с кодировкой utf-8.
        file.write(str(soup))
        # Записывает измененный HTML-код (в строковом формате) в новый файл.

if __name__ == '__main__':
# Проверяет, что скрипт выполняется как основной, а не импортируется как модуль.
    main()